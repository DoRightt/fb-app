// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repo/common/db.go
//
// Generated by this command:
//
//	mockgen -source=internal/repo/common/db.go -destination=internal/repo/common/mocks/mock_db.go
//

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	model "fightbettr.com/fb-server/pkg/model"
	reflect "reflect"

	pgx "github.com/jackc/pgx/v5"
	pgxpool "github.com/jackc/pgx/v5/pgxpool"
	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockFbCommonRepo is a mock of FbCommonRepo interface.
type MockFbCommonRepo struct {
	ctrl     *gomock.Controller
	recorder *MockFbCommonRepoMockRecorder
}

// MockFbCommonRepoMockRecorder is the mock recorder for MockFbCommonRepo.
type MockFbCommonRepoMockRecorder struct {
	mock *MockFbCommonRepo
}

// NewMockFbCommonRepo creates a new mock instance.
func NewMockFbCommonRepo(ctrl *gomock.Controller) *MockFbCommonRepo {
	mock := &MockFbCommonRepo{ctrl: ctrl}
	mock.recorder = &MockFbCommonRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFbCommonRepo) EXPECT() *MockFbCommonRepoMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockFbCommonRepo) BeginTx(ctx context.Context, txOptions pgx.TxOptions) (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, txOptions)
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockFbCommonRepoMockRecorder) BeginTx(ctx, txOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockFbCommonRepo)(nil).BeginTx), ctx, txOptions)
}

// ConnectDBPool mocks base method.
func (m *MockFbCommonRepo) ConnectDBPool(ctx context.Context) (*pgxpool.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectDBPool", ctx)
	ret0, _ := ret[0].(*pgxpool.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectDBPool indicates an expected call of ConnectDBPool.
func (mr *MockFbCommonRepoMockRecorder) ConnectDBPool(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectDBPool", reflect.TypeOf((*MockFbCommonRepo)(nil).ConnectDBPool), ctx)
}

// CreateBet mocks base method.
func (m *MockFbCommonRepo) CreateBet(ctx context.Context, bet *model.Bet) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBet", ctx, bet)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBet indicates an expected call of CreateBet.
func (mr *MockFbCommonRepoMockRecorder) CreateBet(ctx, bet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBet", reflect.TypeOf((*MockFbCommonRepo)(nil).CreateBet), ctx, bet)
}

// DebugLogSqlErr mocks base method.
func (m *MockFbCommonRepo) DebugLogSqlErr(q string, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebugLogSqlErr", q, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// DebugLogSqlErr indicates an expected call of DebugLogSqlErr.
func (mr *MockFbCommonRepoMockRecorder) DebugLogSqlErr(q, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugLogSqlErr", reflect.TypeOf((*MockFbCommonRepo)(nil).DebugLogSqlErr), q, err)
}

// DeleteRecords mocks base method.
func (m *MockFbCommonRepo) DeleteRecords(ctx context.Context, tableName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecords", ctx, tableName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecords indicates an expected call of DeleteRecords.
func (mr *MockFbCommonRepoMockRecorder) DeleteRecords(ctx, tableName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecords", reflect.TypeOf((*MockFbCommonRepo)(nil).DeleteRecords), ctx, tableName)
}

// GetEventId mocks base method.
func (m *MockFbCommonRepo) GetEventId(ctx context.Context, tx pgx.Tx, fightId int32) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventId", ctx, tx, fightId)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventId indicates an expected call of GetEventId.
func (mr *MockFbCommonRepoMockRecorder) GetEventId(ctx, tx, fightId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventId", reflect.TypeOf((*MockFbCommonRepo)(nil).GetEventId), ctx, tx, fightId)
}

// GetLogger mocks base method.
func (m *MockFbCommonRepo) GetLogger() *zap.SugaredLogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger")
	ret0, _ := ret[0].(*zap.SugaredLogger)
	return ret0
}

// GetLogger indicates an expected call of GetLogger.
func (mr *MockFbCommonRepoMockRecorder) GetLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockFbCommonRepo)(nil).GetLogger))
}

// GetPool mocks base method.
func (m *MockFbCommonRepo) GetPool() *pgxpool.Pool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPool")
	ret0, _ := ret[0].(*pgxpool.Pool)
	return ret0
}

// GetPool indicates an expected call of GetPool.
func (mr *MockFbCommonRepoMockRecorder) GetPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPool", reflect.TypeOf((*MockFbCommonRepo)(nil).GetPool))
}

// GetPoolConfig mocks base method.
func (m *MockFbCommonRepo) GetPoolConfig() (*pgxpool.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoolConfig")
	ret0, _ := ret[0].(*pgxpool.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPoolConfig indicates an expected call of GetPoolConfig.
func (mr *MockFbCommonRepoMockRecorder) GetPoolConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoolConfig", reflect.TypeOf((*MockFbCommonRepo)(nil).GetPoolConfig))
}

// GetUndoneFightsCount mocks base method.
func (m *MockFbCommonRepo) GetUndoneFightsCount(ctx context.Context, tx pgx.Tx, eventId int32) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUndoneFightsCount", ctx, tx, eventId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUndoneFightsCount indicates an expected call of GetUndoneFightsCount.
func (mr *MockFbCommonRepoMockRecorder) GetUndoneFightsCount(ctx, tx, eventId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUndoneFightsCount", reflect.TypeOf((*MockFbCommonRepo)(nil).GetUndoneFightsCount), ctx, tx, eventId)
}

// GracefulShutdown mocks base method.
func (m *MockFbCommonRepo) GracefulShutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GracefulShutdown")
}

// GracefulShutdown indicates an expected call of GracefulShutdown.
func (mr *MockFbCommonRepoMockRecorder) GracefulShutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GracefulShutdown", reflect.TypeOf((*MockFbCommonRepo)(nil).GracefulShutdown))
}

// SanitizeString mocks base method.
func (m *MockFbCommonRepo) SanitizeString(s string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SanitizeString", s)
	ret0, _ := ret[0].(string)
	return ret0
}

// SanitizeString indicates an expected call of SanitizeString.
func (mr *MockFbCommonRepoMockRecorder) SanitizeString(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SanitizeString", reflect.TypeOf((*MockFbCommonRepo)(nil).SanitizeString), s)
}

// SearchBets mocks base method.
func (m *MockFbCommonRepo) SearchBets(ctx context.Context, userId int32) ([]*model.Bet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchBets", ctx, userId)
	ret0, _ := ret[0].([]*model.Bet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchBets indicates an expected call of SearchBets.
func (mr *MockFbCommonRepoMockRecorder) SearchBets(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBets", reflect.TypeOf((*MockFbCommonRepo)(nil).SearchBets), ctx, userId)
}

// SearchBetsCount mocks base method.
func (m *MockFbCommonRepo) SearchBetsCount(ctx context.Context, userId int32) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchBetsCount", ctx, userId)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchBetsCount indicates an expected call of SearchBetsCount.
func (mr *MockFbCommonRepoMockRecorder) SearchBetsCount(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBetsCount", reflect.TypeOf((*MockFbCommonRepo)(nil).SearchBetsCount), ctx, userId)
}

// SearchEvents mocks base method.
func (m *MockFbCommonRepo) SearchEvents(ctx context.Context) ([]*model.FullEventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchEvents", ctx)
	ret0, _ := ret[0].([]*model.FullEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchEvents indicates an expected call of SearchEvents.
func (mr *MockFbCommonRepoMockRecorder) SearchEvents(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchEvents", reflect.TypeOf((*MockFbCommonRepo)(nil).SearchEvents), ctx)
}

// SearchEventsCount mocks base method.
func (m *MockFbCommonRepo) SearchEventsCount(ctx context.Context) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchEventsCount", ctx)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchEventsCount indicates an expected call of SearchEventsCount.
func (mr *MockFbCommonRepoMockRecorder) SearchEventsCount(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchEventsCount", reflect.TypeOf((*MockFbCommonRepo)(nil).SearchEventsCount), ctx)
}

// SearchFighters mocks base method.
func (m *MockFbCommonRepo) SearchFighters(ctx context.Context, req *model.FightersRequest) ([]*model.Fighter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFighters", ctx, req)
	ret0, _ := ret[0].([]*model.Fighter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFighters indicates an expected call of SearchFighters.
func (mr *MockFbCommonRepoMockRecorder) SearchFighters(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFighters", reflect.TypeOf((*MockFbCommonRepo)(nil).SearchFighters), ctx, req)
}

// SearchFightersCount mocks base method.
func (m *MockFbCommonRepo) SearchFightersCount(ctx context.Context, req *model.FightersRequest) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFightersCount", ctx, req)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFightersCount indicates an expected call of SearchFightersCount.
func (mr *MockFbCommonRepoMockRecorder) SearchFightersCount(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFightersCount", reflect.TypeOf((*MockFbCommonRepo)(nil).SearchFightersCount), ctx, req)
}

// SetEventDone mocks base method.
func (m *MockFbCommonRepo) SetEventDone(ctx context.Context, tx pgx.Tx, eventId int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEventDone", ctx, tx, eventId)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEventDone indicates an expected call of SetEventDone.
func (mr *MockFbCommonRepoMockRecorder) SetEventDone(ctx, tx, eventId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventDone", reflect.TypeOf((*MockFbCommonRepo)(nil).SetEventDone), ctx, tx, eventId)
}

// SetFightResult mocks base method.
func (m *MockFbCommonRepo) SetFightResult(ctx context.Context, tx pgx.Tx, fr *model.FightResultRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFightResult", ctx, tx, fr)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFightResult indicates an expected call of SetFightResult.
func (mr *MockFbCommonRepoMockRecorder) SetFightResult(ctx, tx, fr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFightResult", reflect.TypeOf((*MockFbCommonRepo)(nil).SetFightResult), ctx, tx, fr)
}

// TxCreateEvent mocks base method.
func (m *MockFbCommonRepo) TxCreateEvent(ctx context.Context, tx pgx.Tx, e *model.EventsRequest) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxCreateEvent", ctx, tx, e)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxCreateEvent indicates an expected call of TxCreateEvent.
func (mr *MockFbCommonRepoMockRecorder) TxCreateEvent(ctx, tx, e any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxCreateEvent", reflect.TypeOf((*MockFbCommonRepo)(nil).TxCreateEvent), ctx, tx, e)
}

// TxCreateEventFight mocks base method.
func (m *MockFbCommonRepo) TxCreateEventFight(ctx context.Context, tx pgx.Tx, f model.Fight) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxCreateEventFight", ctx, tx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// TxCreateEventFight indicates an expected call of TxCreateEventFight.
func (mr *MockFbCommonRepoMockRecorder) TxCreateEventFight(ctx, tx, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxCreateEventFight", reflect.TypeOf((*MockFbCommonRepo)(nil).TxCreateEventFight), ctx, tx, f)
}
