// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repo/fighters/db.go
//
// Generated by this command:
//
//	mockgen -source=internal/repo/fighters/db.go -destination=internal/repo/fighters/mocks/mock_db.go
//

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	model "fightbettr.com/fb-server/pkg/model"
	reflect "reflect"

	pgx "github.com/jackc/pgx/v5"
	pgxpool "github.com/jackc/pgx/v5/pgxpool"
	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockFbFightersRepo is a mock of FbFightersRepo interface.
type MockFbFightersRepo struct {
	ctrl     *gomock.Controller
	recorder *MockFbFightersRepoMockRecorder
}

// MockFbFightersRepoMockRecorder is the mock recorder for MockFbFightersRepo.
type MockFbFightersRepoMockRecorder struct {
	mock *MockFbFightersRepo
}

// NewMockFbFightersRepo creates a new mock instance.
func NewMockFbFightersRepo(ctrl *gomock.Controller) *MockFbFightersRepo {
	mock := &MockFbFightersRepo{ctrl: ctrl}
	mock.recorder = &MockFbFightersRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFbFightersRepo) EXPECT() *MockFbFightersRepoMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockFbFightersRepo) BeginTx(ctx context.Context, txOptions pgx.TxOptions) (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, txOptions)
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockFbFightersRepoMockRecorder) BeginTx(ctx, txOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockFbFightersRepo)(nil).BeginTx), ctx, txOptions)
}

// ConnectDBPool mocks base method.
func (m *MockFbFightersRepo) ConnectDBPool(ctx context.Context) (*pgxpool.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectDBPool", ctx)
	ret0, _ := ret[0].(*pgxpool.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectDBPool indicates an expected call of ConnectDBPool.
func (mr *MockFbFightersRepoMockRecorder) ConnectDBPool(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectDBPool", reflect.TypeOf((*MockFbFightersRepo)(nil).ConnectDBPool), ctx)
}

// CreateNewFighter mocks base method.
func (m *MockFbFightersRepo) CreateNewFighter(ctx context.Context, tx pgx.Tx, fighter model.Fighter) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewFighter", ctx, tx, fighter)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewFighter indicates an expected call of CreateNewFighter.
func (mr *MockFbFightersRepoMockRecorder) CreateNewFighter(ctx, tx, fighter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewFighter", reflect.TypeOf((*MockFbFightersRepo)(nil).CreateNewFighter), ctx, tx, fighter)
}

// CreateNewFighterStats mocks base method.
func (m *MockFbFightersRepo) CreateNewFighterStats(ctx context.Context, tx pgx.Tx, stats model.FighterStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewFighterStats", ctx, tx, stats)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewFighterStats indicates an expected call of CreateNewFighterStats.
func (mr *MockFbFightersRepoMockRecorder) CreateNewFighterStats(ctx, tx, stats any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewFighterStats", reflect.TypeOf((*MockFbFightersRepo)(nil).CreateNewFighterStats), ctx, tx, stats)
}

// DebugLogSqlErr mocks base method.
func (m *MockFbFightersRepo) DebugLogSqlErr(q string, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebugLogSqlErr", q, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// DebugLogSqlErr indicates an expected call of DebugLogSqlErr.
func (mr *MockFbFightersRepoMockRecorder) DebugLogSqlErr(q, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugLogSqlErr", reflect.TypeOf((*MockFbFightersRepo)(nil).DebugLogSqlErr), q, err)
}

// DeleteRecords mocks base method.
func (m *MockFbFightersRepo) DeleteRecords(ctx context.Context, tableName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecords", ctx, tableName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecords indicates an expected call of DeleteRecords.
func (mr *MockFbFightersRepoMockRecorder) DeleteRecords(ctx, tableName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecords", reflect.TypeOf((*MockFbFightersRepo)(nil).DeleteRecords), ctx, tableName)
}

// FindFighter mocks base method.
func (m *MockFbFightersRepo) FindFighter(ctx context.Context, req model.Fighter) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFighter", ctx, req)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFighter indicates an expected call of FindFighter.
func (mr *MockFbFightersRepoMockRecorder) FindFighter(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFighter", reflect.TypeOf((*MockFbFightersRepo)(nil).FindFighter), ctx, req)
}

// GetLogger mocks base method.
func (m *MockFbFightersRepo) GetLogger() *zap.SugaredLogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger")
	ret0, _ := ret[0].(*zap.SugaredLogger)
	return ret0
}

// GetLogger indicates an expected call of GetLogger.
func (mr *MockFbFightersRepoMockRecorder) GetLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockFbFightersRepo)(nil).GetLogger))
}

// GetPool mocks base method.
func (m *MockFbFightersRepo) GetPool() *pgxpool.Pool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPool")
	ret0, _ := ret[0].(*pgxpool.Pool)
	return ret0
}

// GetPool indicates an expected call of GetPool.
func (mr *MockFbFightersRepoMockRecorder) GetPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPool", reflect.TypeOf((*MockFbFightersRepo)(nil).GetPool))
}

// GetPoolConfig mocks base method.
func (m *MockFbFightersRepo) GetPoolConfig() (*pgxpool.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoolConfig")
	ret0, _ := ret[0].(*pgxpool.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPoolConfig indicates an expected call of GetPoolConfig.
func (mr *MockFbFightersRepoMockRecorder) GetPoolConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoolConfig", reflect.TypeOf((*MockFbFightersRepo)(nil).GetPoolConfig))
}

// GracefulShutdown mocks base method.
func (m *MockFbFightersRepo) GracefulShutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GracefulShutdown")
}

// GracefulShutdown indicates an expected call of GracefulShutdown.
func (mr *MockFbFightersRepoMockRecorder) GracefulShutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GracefulShutdown", reflect.TypeOf((*MockFbFightersRepo)(nil).GracefulShutdown))
}

// SanitizeString mocks base method.
func (m *MockFbFightersRepo) SanitizeString(s string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SanitizeString", s)
	ret0, _ := ret[0].(string)
	return ret0
}

// SanitizeString indicates an expected call of SanitizeString.
func (mr *MockFbFightersRepoMockRecorder) SanitizeString(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SanitizeString", reflect.TypeOf((*MockFbFightersRepo)(nil).SanitizeString), s)
}

// UpdateFighter mocks base method.
func (m *MockFbFightersRepo) UpdateFighter(ctx context.Context, tx pgx.Tx, fighter model.Fighter) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFighter", ctx, tx, fighter)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFighter indicates an expected call of UpdateFighter.
func (mr *MockFbFightersRepoMockRecorder) UpdateFighter(ctx, tx, fighter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFighter", reflect.TypeOf((*MockFbFightersRepo)(nil).UpdateFighter), ctx, tx, fighter)
}

// UpdateFighterStats mocks base method.
func (m *MockFbFightersRepo) UpdateFighterStats(ctx context.Context, tx pgx.Tx, stats model.FighterStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFighterStats", ctx, tx, stats)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFighterStats indicates an expected call of UpdateFighterStats.
func (mr *MockFbFightersRepoMockRecorder) UpdateFighterStats(ctx, tx, stats any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFighterStats", reflect.TypeOf((*MockFbFightersRepo)(nil).UpdateFighterStats), ctx, tx, stats)
}
