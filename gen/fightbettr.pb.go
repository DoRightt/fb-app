// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.12.4
// source: fightbettr.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Fighter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FighterId      int32         `protobuf:"varint,1,opt,name=fighterId,proto3" json:"fighterId,omitempty"`
	Name           string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NickName       string        `protobuf:"bytes,3,opt,name=nickName,proto3" json:"nickName,omitempty"`
	Division       int32         `protobuf:"varint,4,opt,name=division,proto3" json:"division,omitempty"`
	Status         string        `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Hometown       string        `protobuf:"bytes,6,opt,name=hometown,proto3" json:"hometown,omitempty"`
	TrainsAt       string        `protobuf:"bytes,7,opt,name=trainsAt,proto3" json:"trainsAt,omitempty"`
	FightingStyle  string        `protobuf:"bytes,8,opt,name=fightingStyle,proto3" json:"fightingStyle,omitempty"`
	Age            int32         `protobuf:"varint,9,opt,name=age,proto3" json:"age,omitempty"`
	Height         float32       `protobuf:"fixed32,10,opt,name=height,proto3" json:"height,omitempty"`
	Weight         float32       `protobuf:"fixed32,11,opt,name=weight,proto3" json:"weight,omitempty"`
	OctagonDebut   string        `protobuf:"bytes,12,opt,name=octagonDebut,proto3" json:"octagonDebut,omitempty"`
	DebutTimestamp int32         `protobuf:"varint,13,opt,name=debutTimestamp,proto3" json:"debutTimestamp,omitempty"`
	Reach          float32       `protobuf:"fixed32,14,opt,name=reach,proto3" json:"reach,omitempty"`
	LegReach       float32       `protobuf:"fixed32,15,opt,name=legReach,proto3" json:"legReach,omitempty"`
	Wins           int32         `protobuf:"varint,16,opt,name=wins,proto3" json:"wins,omitempty"`
	Loses          int32         `protobuf:"varint,17,opt,name=loses,proto3" json:"loses,omitempty"`
	Draw           int32         `protobuf:"varint,18,opt,name=draw,proto3" json:"draw,omitempty"`
	FighterUrl     string        `protobuf:"bytes,19,opt,name=fighterUrl,proto3" json:"fighterUrl,omitempty"`
	ImageUrl       string        `protobuf:"bytes,20,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
	Stats          *FighterStats `protobuf:"bytes,21,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *Fighter) Reset() {
	*x = Fighter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fightbettr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fighter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fighter) ProtoMessage() {}

func (x *Fighter) ProtoReflect() protoreflect.Message {
	mi := &file_fightbettr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fighter.ProtoReflect.Descriptor instead.
func (*Fighter) Descriptor() ([]byte, []int) {
	return file_fightbettr_proto_rawDescGZIP(), []int{0}
}

func (x *Fighter) GetFighterId() int32 {
	if x != nil {
		return x.FighterId
	}
	return 0
}

func (x *Fighter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Fighter) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *Fighter) GetDivision() int32 {
	if x != nil {
		return x.Division
	}
	return 0
}

func (x *Fighter) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Fighter) GetHometown() string {
	if x != nil {
		return x.Hometown
	}
	return ""
}

func (x *Fighter) GetTrainsAt() string {
	if x != nil {
		return x.TrainsAt
	}
	return ""
}

func (x *Fighter) GetFightingStyle() string {
	if x != nil {
		return x.FightingStyle
	}
	return ""
}

func (x *Fighter) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *Fighter) GetHeight() float32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Fighter) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Fighter) GetOctagonDebut() string {
	if x != nil {
		return x.OctagonDebut
	}
	return ""
}

func (x *Fighter) GetDebutTimestamp() int32 {
	if x != nil {
		return x.DebutTimestamp
	}
	return 0
}

func (x *Fighter) GetReach() float32 {
	if x != nil {
		return x.Reach
	}
	return 0
}

func (x *Fighter) GetLegReach() float32 {
	if x != nil {
		return x.LegReach
	}
	return 0
}

func (x *Fighter) GetWins() int32 {
	if x != nil {
		return x.Wins
	}
	return 0
}

func (x *Fighter) GetLoses() int32 {
	if x != nil {
		return x.Loses
	}
	return 0
}

func (x *Fighter) GetDraw() int32 {
	if x != nil {
		return x.Draw
	}
	return 0
}

func (x *Fighter) GetFighterUrl() string {
	if x != nil {
		return x.FighterUrl
	}
	return ""
}

func (x *Fighter) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Fighter) GetStats() *FighterStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type FighterStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatId               int32   `protobuf:"varint,1,opt,name=statId,proto3" json:"statId,omitempty"`
	FighterId            int32   `protobuf:"varint,2,opt,name=fighterId,proto3" json:"fighterId,omitempty"`
	TotalSigStrLanded    int32   `protobuf:"varint,3,opt,name=totalSigStrLanded,proto3" json:"totalSigStrLanded,omitempty"`
	TotalSigStrAttempted int32   `protobuf:"varint,4,opt,name=totalSigStrAttempted,proto3" json:"totalSigStrAttempted,omitempty"`
	StrAccuracy          int32   `protobuf:"varint,5,opt,name=strAccuracy,proto3" json:"strAccuracy,omitempty"`
	TotalTkdLanded       int32   `protobuf:"varint,6,opt,name=totalTkdLanded,proto3" json:"totalTkdLanded,omitempty"`
	TotalTkdAttempted    int32   `protobuf:"varint,7,opt,name=totalTkdAttempted,proto3" json:"totalTkdAttempted,omitempty"`
	TkdAccuracy          int32   `protobuf:"varint,8,opt,name=tkdAccuracy,proto3" json:"tkdAccuracy,omitempty"`
	SigStrLanded         float32 `protobuf:"fixed32,9,opt,name=sigStrLanded,proto3" json:"sigStrLanded,omitempty"`
	SigStrAbs            float32 `protobuf:"fixed32,10,opt,name=sigStrAbs,proto3" json:"sigStrAbs,omitempty"`
	SigStrDefense        int32   `protobuf:"varint,11,opt,name=sigStrDefense,proto3" json:"sigStrDefense,omitempty"`
	TakedownDefense      int32   `protobuf:"varint,12,opt,name=takedownDefense,proto3" json:"takedownDefense,omitempty"`
	TakedownAvg          float32 `protobuf:"fixed32,13,opt,name=takedownAvg,proto3" json:"takedownAvg,omitempty"`
	SubmissionAvg        float32 `protobuf:"fixed32,14,opt,name=submissionAvg,proto3" json:"submissionAvg,omitempty"`
	KnockdownAvg         float32 `protobuf:"fixed32,15,opt,name=knockdownAvg,proto3" json:"knockdownAvg,omitempty"`
	AvgFightTime         string  `protobuf:"bytes,16,opt,name=avgFightTime,proto3" json:"avgFightTime,omitempty"`
	WinByKO              int32   `protobuf:"varint,17,opt,name=winByKO,proto3" json:"winByKO,omitempty"`
	WinBySub             int32   `protobuf:"varint,18,opt,name=winBySub,proto3" json:"winBySub,omitempty"`
	WinByDec             int32   `protobuf:"varint,19,opt,name=winByDec,proto3" json:"winByDec,omitempty"`
}

func (x *FighterStats) Reset() {
	*x = FighterStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fightbettr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FighterStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FighterStats) ProtoMessage() {}

func (x *FighterStats) ProtoReflect() protoreflect.Message {
	mi := &file_fightbettr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FighterStats.ProtoReflect.Descriptor instead.
func (*FighterStats) Descriptor() ([]byte, []int) {
	return file_fightbettr_proto_rawDescGZIP(), []int{1}
}

func (x *FighterStats) GetStatId() int32 {
	if x != nil {
		return x.StatId
	}
	return 0
}

func (x *FighterStats) GetFighterId() int32 {
	if x != nil {
		return x.FighterId
	}
	return 0
}

func (x *FighterStats) GetTotalSigStrLanded() int32 {
	if x != nil {
		return x.TotalSigStrLanded
	}
	return 0
}

func (x *FighterStats) GetTotalSigStrAttempted() int32 {
	if x != nil {
		return x.TotalSigStrAttempted
	}
	return 0
}

func (x *FighterStats) GetStrAccuracy() int32 {
	if x != nil {
		return x.StrAccuracy
	}
	return 0
}

func (x *FighterStats) GetTotalTkdLanded() int32 {
	if x != nil {
		return x.TotalTkdLanded
	}
	return 0
}

func (x *FighterStats) GetTotalTkdAttempted() int32 {
	if x != nil {
		return x.TotalTkdAttempted
	}
	return 0
}

func (x *FighterStats) GetTkdAccuracy() int32 {
	if x != nil {
		return x.TkdAccuracy
	}
	return 0
}

func (x *FighterStats) GetSigStrLanded() float32 {
	if x != nil {
		return x.SigStrLanded
	}
	return 0
}

func (x *FighterStats) GetSigStrAbs() float32 {
	if x != nil {
		return x.SigStrAbs
	}
	return 0
}

func (x *FighterStats) GetSigStrDefense() int32 {
	if x != nil {
		return x.SigStrDefense
	}
	return 0
}

func (x *FighterStats) GetTakedownDefense() int32 {
	if x != nil {
		return x.TakedownDefense
	}
	return 0
}

func (x *FighterStats) GetTakedownAvg() float32 {
	if x != nil {
		return x.TakedownAvg
	}
	return 0
}

func (x *FighterStats) GetSubmissionAvg() float32 {
	if x != nil {
		return x.SubmissionAvg
	}
	return 0
}

func (x *FighterStats) GetKnockdownAvg() float32 {
	if x != nil {
		return x.KnockdownAvg
	}
	return 0
}

func (x *FighterStats) GetAvgFightTime() string {
	if x != nil {
		return x.AvgFightTime
	}
	return ""
}

func (x *FighterStats) GetWinByKO() int32 {
	if x != nil {
		return x.WinByKO
	}
	return 0
}

func (x *FighterStats) GetWinBySub() int32 {
	if x != nil {
		return x.WinBySub
	}
	return 0
}

func (x *FighterStats) GetWinByDec() int32 {
	if x != nil {
		return x.WinByDec
	}
	return 0
}

type FightersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *FightersRequest) Reset() {
	*x = FightersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fightbettr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightersRequest) ProtoMessage() {}

func (x *FightersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fightbettr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightersRequest.ProtoReflect.Descriptor instead.
func (*FightersRequest) Descriptor() ([]byte, []int) {
	return file_fightbettr_proto_rawDescGZIP(), []int{2}
}

func (x *FightersRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type FightersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fighters []*Fighter `protobuf:"bytes,1,rep,name=fighters,proto3" json:"fighters,omitempty"`
}

func (x *FightersResponse) Reset() {
	*x = FightersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fightbettr_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightersResponse) ProtoMessage() {}

func (x *FightersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fightbettr_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightersResponse.ProtoReflect.Descriptor instead.
func (*FightersResponse) Descriptor() ([]byte, []int) {
	return file_fightbettr_proto_rawDescGZIP(), []int{3}
}

func (x *FightersResponse) GetFighters() []*Fighter {
	if x != nil {
		return x.Fighters
	}
	return nil
}

type FightersCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *FightersCountResponse) Reset() {
	*x = FightersCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fightbettr_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightersCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightersCountResponse) ProtoMessage() {}

func (x *FightersCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fightbettr_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightersCountResponse.ProtoReflect.Descriptor instead.
func (*FightersCountResponse) Descriptor() ([]byte, []int) {
	return file_fightbettr_proto_rawDescGZIP(), []int{4}
}

func (x *FightersCountResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_fightbettr_proto protoreflect.FileDescriptor

var file_fightbettr_proto_rawDesc = []byte{
	0x0a, 0x10, 0x66, 0x69, 0x67, 0x68, 0x74, 0x62, 0x65, 0x74, 0x74, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xc8, 0x04, 0x0a, 0x07, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x67, 0x68,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x66, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x63, 0x74, 0x61, 0x67, 0x6f, 0x6e, 0x44, 0x65, 0x62, 0x75, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x63, 0x74, 0x61, 0x67, 0x6f, 0x6e, 0x44,
	0x65, 0x62, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x62, 0x75, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x64, 0x65,
	0x62, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x67, 0x52, 0x65, 0x61, 0x63, 0x68, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x65, 0x67, 0x52, 0x65, 0x61, 0x63, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x69,
	0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x72, 0x61, 0x77,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x72, 0x61, 0x77, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0xb4, 0x05,
	0x0a, 0x0c, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x69, 0x67, 0x68, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x67,
	0x53, 0x74, 0x72, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x53, 0x74, 0x72, 0x4c, 0x61, 0x6e, 0x64,
	0x65, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x53, 0x74,
	0x72, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x53, 0x74, 0x72, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x41, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x72,
	0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x6b, 0x64, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6b, 0x64, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x64,
	0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6b, 0x64, 0x41, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x54, 0x6b, 0x64, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x6b, 0x64, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6b, 0x64, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x53, 0x74, 0x72, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x69, 0x67, 0x53, 0x74, 0x72, 0x4c, 0x61,
	0x6e, 0x64, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x53, 0x74, 0x72, 0x41, 0x62,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x69, 0x67, 0x53, 0x74, 0x72, 0x41,
	0x62, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x53, 0x74, 0x72, 0x44, 0x65, 0x66, 0x65,
	0x6e, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x53, 0x74,
	0x72, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x61, 0x6b, 0x65,
	0x64, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x41, 0x76,
	0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77,
	0x6e, 0x41, 0x76, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x76, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x76, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x6b, 0x6e,
	0x6f, 0x63, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x41, 0x76, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x6b, 0x6e, 0x6f, 0x63, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x41, 0x76, 0x67, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x76, 0x67, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x76, 0x67, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x69, 0x6e, 0x42, 0x79, 0x4b, 0x4f, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x42, 0x79, 0x4b, 0x4f, 0x12, 0x1a, 0x0a, 0x08,
	0x77, 0x69, 0x6e, 0x42, 0x79, 0x53, 0x75, 0x62, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x77, 0x69, 0x6e, 0x42, 0x79, 0x53, 0x75, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x42,
	0x79, 0x44, 0x65, 0x63, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x42,
	0x79, 0x44, 0x65, 0x63, 0x22, 0x29, 0x0a, 0x0f, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x38, 0x0a, 0x10, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x52,
	0x08, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x73, 0x22, 0x2d, 0x0a, 0x15, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x89, 0x01, 0x0a, 0x0f, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x72, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x13,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x10, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x10, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2f, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fightbettr_proto_rawDescOnce sync.Once
	file_fightbettr_proto_rawDescData = file_fightbettr_proto_rawDesc
)

func file_fightbettr_proto_rawDescGZIP() []byte {
	file_fightbettr_proto_rawDescOnce.Do(func() {
		file_fightbettr_proto_rawDescData = protoimpl.X.CompressGZIP(file_fightbettr_proto_rawDescData)
	})
	return file_fightbettr_proto_rawDescData
}

var file_fightbettr_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_fightbettr_proto_goTypes = []interface{}{
	(*Fighter)(nil),               // 0: Fighter
	(*FighterStats)(nil),          // 1: FighterStats
	(*FightersRequest)(nil),       // 2: FightersRequest
	(*FightersResponse)(nil),      // 3: FightersResponse
	(*FightersCountResponse)(nil), // 4: FightersCountResponse
}
var file_fightbettr_proto_depIdxs = []int32{
	1, // 0: Fighter.stats:type_name -> FighterStats
	0, // 1: FightersResponse.fighters:type_name -> Fighter
	2, // 2: FightersService.SearchFightersCount:input_type -> FightersRequest
	2, // 3: FightersService.SearchFighters:input_type -> FightersRequest
	4, // 4: FightersService.SearchFightersCount:output_type -> FightersCountResponse
	3, // 5: FightersService.SearchFighters:output_type -> FightersResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_fightbettr_proto_init() }
func file_fightbettr_proto_init() {
	if File_fightbettr_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fightbettr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fighter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fightbettr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FighterStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fightbettr_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FightersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fightbettr_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FightersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fightbettr_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FightersCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fightbettr_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fightbettr_proto_goTypes,
		DependencyIndexes: file_fightbettr_proto_depIdxs,
		MessageInfos:      file_fightbettr_proto_msgTypes,
	}.Build()
	File_fightbettr_proto = out.File
	file_fightbettr_proto_rawDesc = nil
	file_fightbettr_proto_goTypes = nil
	file_fightbettr_proto_depIdxs = nil
}
