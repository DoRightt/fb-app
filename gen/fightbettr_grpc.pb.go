// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: fightbettr.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FightersService_SearchFightersCount_FullMethodName = "/FightersService/SearchFightersCount"
	FightersService_SearchFighters_FullMethodName      = "/FightersService/SearchFighters"
)

// FightersServiceClient is the client API for FightersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FightersServiceClient interface {
	SearchFightersCount(ctx context.Context, in *FightersRequest, opts ...grpc.CallOption) (*FightersCountResponse, error)
	SearchFighters(ctx context.Context, in *FightersRequest, opts ...grpc.CallOption) (*FightersResponse, error)
}

type fightersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFightersServiceClient(cc grpc.ClientConnInterface) FightersServiceClient {
	return &fightersServiceClient{cc}
}

func (c *fightersServiceClient) SearchFightersCount(ctx context.Context, in *FightersRequest, opts ...grpc.CallOption) (*FightersCountResponse, error) {
	out := new(FightersCountResponse)
	err := c.cc.Invoke(ctx, FightersService_SearchFightersCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fightersServiceClient) SearchFighters(ctx context.Context, in *FightersRequest, opts ...grpc.CallOption) (*FightersResponse, error) {
	out := new(FightersResponse)
	err := c.cc.Invoke(ctx, FightersService_SearchFighters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FightersServiceServer is the server API for FightersService service.
// All implementations must embed UnimplementedFightersServiceServer
// for forward compatibility
type FightersServiceServer interface {
	SearchFightersCount(context.Context, *FightersRequest) (*FightersCountResponse, error)
	SearchFighters(context.Context, *FightersRequest) (*FightersResponse, error)
	mustEmbedUnimplementedFightersServiceServer()
}

// UnimplementedFightersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFightersServiceServer struct {
}

func (UnimplementedFightersServiceServer) SearchFightersCount(context.Context, *FightersRequest) (*FightersCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFightersCount not implemented")
}
func (UnimplementedFightersServiceServer) SearchFighters(context.Context, *FightersRequest) (*FightersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFighters not implemented")
}
func (UnimplementedFightersServiceServer) mustEmbedUnimplementedFightersServiceServer() {}

// UnsafeFightersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FightersServiceServer will
// result in compilation errors.
type UnsafeFightersServiceServer interface {
	mustEmbedUnimplementedFightersServiceServer()
}

func RegisterFightersServiceServer(s grpc.ServiceRegistrar, srv FightersServiceServer) {
	s.RegisterService(&FightersService_ServiceDesc, srv)
}

func _FightersService_SearchFightersCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FightersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FightersServiceServer).SearchFightersCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FightersService_SearchFightersCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FightersServiceServer).SearchFightersCount(ctx, req.(*FightersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FightersService_SearchFighters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FightersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FightersServiceServer).SearchFighters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FightersService_SearchFighters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FightersServiceServer).SearchFighters(ctx, req.(*FightersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FightersService_ServiceDesc is the grpc.ServiceDesc for FightersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FightersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FightersService",
	HandlerType: (*FightersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchFightersCount",
			Handler:    _FightersService_SearchFightersCount_Handler,
		},
		{
			MethodName: "SearchFighters",
			Handler:    _FightersService_SearchFighters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fightbettr.proto",
}
