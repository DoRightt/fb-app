// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/pgxs/pgx.go
//
// Generated by this command:
//
//	mockgen -source=pkg/pgxs/pgx.go -destination=pkg/pgxs/mocks/mock_pgx.go
//

// Package mock_pgxs is a generated GoMock package.
package mock_pgxs

import (
	context "context"
	reflect "reflect"

	pgxpool "github.com/jackc/pgx/v5/pgxpool"
	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockFbRepo is a mock of FbRepo interface.
type MockFbRepo struct {
	ctrl     *gomock.Controller
	recorder *MockFbRepoMockRecorder
}

// MockFbRepoMockRecorder is the mock recorder for MockFbRepo.
type MockFbRepoMockRecorder struct {
	mock *MockFbRepo
}

// NewMockFbRepo creates a new mock instance.
func NewMockFbRepo(ctrl *gomock.Controller) *MockFbRepo {
	mock := &MockFbRepo{ctrl: ctrl}
	mock.recorder = &MockFbRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFbRepo) EXPECT() *MockFbRepoMockRecorder {
	return m.recorder
}

// ConnectDBPool mocks base method.
func (m *MockFbRepo) ConnectDBPool(ctx context.Context) (*pgxpool.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectDBPool", ctx)
	ret0, _ := ret[0].(*pgxpool.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectDBPool indicates an expected call of ConnectDBPool.
func (mr *MockFbRepoMockRecorder) ConnectDBPool(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectDBPool", reflect.TypeOf((*MockFbRepo)(nil).ConnectDBPool), ctx)
}

// DebugLogSqlErr mocks base method.
func (m *MockFbRepo) DebugLogSqlErr(q string, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebugLogSqlErr", q, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// DebugLogSqlErr indicates an expected call of DebugLogSqlErr.
func (mr *MockFbRepoMockRecorder) DebugLogSqlErr(q, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugLogSqlErr", reflect.TypeOf((*MockFbRepo)(nil).DebugLogSqlErr), q, err)
}

// DeleteRecords mocks base method.
func (m *MockFbRepo) DeleteRecords(ctx context.Context, tableName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecords", ctx, tableName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecords indicates an expected call of DeleteRecords.
func (mr *MockFbRepoMockRecorder) DeleteRecords(ctx, tableName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecords", reflect.TypeOf((*MockFbRepo)(nil).DeleteRecords), ctx, tableName)
}

// GetLogger mocks base method.
func (m *MockFbRepo) GetLogger() *zap.SugaredLogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger")
	ret0, _ := ret[0].(*zap.SugaredLogger)
	return ret0
}

// GetLogger indicates an expected call of GetLogger.
func (mr *MockFbRepoMockRecorder) GetLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockFbRepo)(nil).GetLogger))
}

// GetPool mocks base method.
func (m *MockFbRepo) GetPool() *pgxpool.Pool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPool")
	ret0, _ := ret[0].(*pgxpool.Pool)
	return ret0
}

// GetPool indicates an expected call of GetPool.
func (mr *MockFbRepoMockRecorder) GetPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPool", reflect.TypeOf((*MockFbRepo)(nil).GetPool))
}

// GetPoolConfig mocks base method.
func (m *MockFbRepo) GetPoolConfig() (*pgxpool.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoolConfig")
	ret0, _ := ret[0].(*pgxpool.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPoolConfig indicates an expected call of GetPoolConfig.
func (mr *MockFbRepoMockRecorder) GetPoolConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoolConfig", reflect.TypeOf((*MockFbRepo)(nil).GetPoolConfig))
}

// GracefulShutdown mocks base method.
func (m *MockFbRepo) GracefulShutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GracefulShutdown")
}

// GracefulShutdown indicates an expected call of GracefulShutdown.
func (mr *MockFbRepoMockRecorder) GracefulShutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GracefulShutdown", reflect.TypeOf((*MockFbRepo)(nil).GracefulShutdown))
}

// SanitizeString mocks base method.
func (m *MockFbRepo) SanitizeString(s string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SanitizeString", s)
	ret0, _ := ret[0].(string)
	return ret0
}

// SanitizeString indicates an expected call of SanitizeString.
func (mr *MockFbRepoMockRecorder) SanitizeString(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SanitizeString", reflect.TypeOf((*MockFbRepo)(nil).SanitizeString), s)
}
